✨필요한 기능✨
기본 도메인주소: http://localhost:8080

회원가입(url: /user_regform)
1-1. 회원가입환영(url: /welcome)
로그인(url: /loginform, HttpSession 이용)
글 쓰기(url: /writeform)
글 목록(url: /, 메인페이지)
글 상세 보기(url: /board?id=@)
글 수정(url: /modifyform)
글 삭제(url: /deleteform)
로그아웃(url: /logout)
관리자 권한(모든 글을 삭제할 수 있는 권한)

<메인페이지(글 목록)>
로그인 여부에 따라 보이는 메뉴가 다름
로그인 했을 때, 아이디와 로그아웃 메뉴 표시
로그인 안 했을 때, 로그인과 회원가입 메뉴 표시
게시판 목록에는 최대 10개까지의 게시글 표시, 전체 게시물 수에 맞게 페이징처리
브라우저에서 서버 접속(http://localhost:8080/)
브라우저에서 요청정보(GET /) 보냄
서버에서 GET / 요청에 대한 처리 작업 후 브라우저로 응답
게시물 리스트 구하기
로그인 여부 확인
접속 종료

<회원가입>
Form 이용하여 회원가입 양식 작성
Form action="/userReg", POST 방식
1-1. 브라우저에서 서버 접속(http://localhost:8080/user_regform)
1-2. 브라우저에서 요청정보(GET /user_regform) 보냄
1-3. 서버에서 GET /user_regform 요청에 대한 처리 작업 후 브라우저로 응답
1-4. 접속 종료

2-1. 회원가입 버튼(submit)으로 서버 접속
2-2. 브라우저에서 요청정보(POST /userReg) 보냄
----> 회원가입 양식의 파라미터 값 전달
2-3. 서버에서 POST /userReg 요청에 대한 처리 작업 후, redirect: /welcome 응답
2-4. 접속 종료

3-1. 브라우저에서 redirect 응답을 받고 자동으로 GET /welcome 요청
3-2. 서버에서 GET /welcome 응답
3-3. 접속 종료


<로그인>
Form 이용하여 로그인 양식 작성
Form action="/login", POST 방식
1-1. 브라우저에서 서버 접속(http://localhost:8080/loginform)
1-2. 브라우저에서 요청정보(POST /login) 보냄
----> 로그인 양식의 파라미터 값 전달
1-3. 서버에서 POST /login 요청에 대한 처리 작업 후, redirect: / 응답
---- 로그인 입력정보가 올바른지 확인
---- HttpSession 로그인 정보 저장
1-4. 접속 종료

2-1. 브라우저에서 redirect 응답을 받고 자동으로 GET / 요청
2-2. 서버에서 GET / 응답
2-3. 접속 종료

<글 상세 보기>
작성자 여부에 따라 삭제, 수정 메뉴 보이기
브라우저에서 서버 접속(http://localhost:8080/board?id=@)
브라우저에서 요청정보(GET /board?id=@) 보냄
서버에서 GET /board?id=@ 요청에 대한 처리 작업 후 브라우저로 응답
id(글 번호)에 따라서 게시물 정보 읽어오기
id(글 번호)에 해당하는 글의 조회수 증가
접속 종료

<글 쓰기>
Form 이용하여 글쓰기 양식 작성
Form action="/write", POST 방식
1-1. 브라우저에서 서버 접속(http://localhost:8080/writeform)
1-2. 브라우저에서 요청정보(GET /writeform) 보냄
1-3. 서버에서 GET /writeform 요청에 대한 처리 작업 후 브라우저로 응답
---- 로그인 여부 확인(HttpSession에 로그인 정보 있는지 확인)하여 회원의 로그인 정보 가져오기
---- 글쓴이 정보에 반영하기 위함
1-4. 접속 종료

2-1. 글쓰기 버튼(submit)으로 서버 접속
2-2. 브라우저에서 요청정보(POST /write) 보냄
----> 글쓰기 양식의 파라미터 값 전달
2-3. 서버에서 POST /write 요청에 대한 처리 작업 후, redirect: /board?id=@ 응답
---- 로그인 여부 확인(HttpSession에 로그인 정보 있는지 확인)하여 해당 회원 정보로 게시물 저장
2-4. 접속 종료

3-1. 브라우저에서 redirect 응답을 받고 자동으로 GET /board?id=@ 요청
3-2. 서버에서 GET /board?id=@ 응답
3-3. 접속 종료


글 수정 & 삭제 부분은 수업 내용을 참고해서 내가 적어봤다.
한번도 이렇게 해 본 적이 없어서 맞는건지는 모르겠지만...

<글 수정>
Form 이용하여 글 수정 양식 작성
Form action="/modify", POST 방식
1-1. 브라우저에서 서버 접속(http://localhost:8080/modifyform)
1-2. 브라우저에서 요청정보(GET /modifyform) 보냄
1-3. 서버에서 GET /modifyform 요청에 대한 처리 작업 후 브라우저로 응답
---- 로그인 여부 확인(HttpSession에 로그인 정보 있는지 확인)하여 회원의 글 정보 가져오기
1-4. 접속 종료

2-1. 글 수정 버튼(submit)으로 서버 접속
2-2. 브라우저에서 요청정보(POST /modify) 보냄
----> 글 수정 양식의 파라미터 값 전달
2-3. 서버에서 POST /modify 요청에 대한 처리 작업 후, redirect: /board?id=@ 응답
---- 로그인 여부 확인(HttpSession에 로그인 정보 있는지 확인)하여 해당 회원 정보로 게시물 수정
2-4. 접속 종료

3-1. 브라우저에서 redirect 응답을 받고 자동으로 GET /board?id=@ 요청
3-2. 서버에서 GET /board?id=@ 응답
3-3. 접속 종료


<글 삭제>
Form 이용하여 글쓰기 양식 작성
Form action="/delete", POST 방식
1-1. 브라우저에서 서버 접속(http://localhost:8080/deleteform)
1-2. 브라우저에서 요청정보(GET /deleteform) 보냄
1-3. 서버에서 GET /deleteform 요청에 대한 처리 작업 후 브라우저로 응답
---- 로그인 여부 확인(HttpSession에 로그인 정보 있는지 확인)하여 회원의 글 정보 가져오기
1-4. 접속 종료

2-1. 글 삭제 버튼(submit)으로 서버 접속
2-2. 브라우저에서 요청정보(POST /delete) 보냄
----> 글 삭제 양식의 파라미터 값 전달
2-3. 서버에서 POST /delete 요청에 대한 처리 작업 후, redirect: / 응답
---- 로그인 여부 확인(HttpSession에 로그인 정보 있는지 확인)하여 해당 회원 정보로 게시물 저장
2-4. 접속 종료

3-1. 브라우저에서 redirect 응답을 받고 자동으로 GET / 요청
3-2. 서버에서 GET / 응답
3-3. 접속 종료
